// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CUSTOMER
  TECHNICIAN
  ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
  SERVICE_LOCATION
}

enum OrderStatus {
  PENDING
  AWAITING_PAYMENT
  PAID
  PROCESSING
  SCHEDULED_SERVICE
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CREDIT_CARD
  PROMPTPAY_QR
  TRANSFER
  WALLET
}

enum BookingStatus {
  REQUESTED
  CONFIRMED
  ASSIGNED
  IN_SERVICE
  DONE
  CANCELLED
}

enum ServiceType {
  BRAKE_PAD_CHANGE
  BRAKE_FLUID
  INSPECTION
}

enum VehicleType {
  CAR
  PICKUP
  SUV
  VAN
  MOTORCYCLE
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  phone         String?  @unique
  passwordHash  String
  role          UserRole @default(CUSTOMER)
  firstName     String
  lastName      String
  addresses     Address[]
  vehicles      Vehicle[]
  cart          Cart?
  orders        Order[]
  bookings      ServiceBooking[] @relation("CustomerBookings")
  reviews       Review[]
  technicianProfile TechnicianProfile?
  couponRedemptions CouponRedemption[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Address {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      AddressType
  label     String?
  line1     String
  line2     String?
  district  String?
  province  String?
  postal    String?
  lat       Decimal?  @db.Decimal(9,6)
  lng       Decimal?  @db.Decimal(9,6)
  isDefault Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@index([userId, type, isDefault])
}

model Vehicle {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  type         VehicleType
  brand        String
  model        String
  year         Int?
  licensePlate String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  bookings     ServiceBooking[]
}

model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  parentId  String?
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  sku         String?       @unique
  description String?
  price       Decimal       @db.Decimal(12,2)
  compareAt   Decimal?      @db.Decimal(12,2)
  active      Boolean       @default(true)
  category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  String?
  images      ProductImage[]
  inventory   Inventory?
  attributes  Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
  @@index([active])
  @@index([categoryId])
}

model ProductImage {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  alt       String?
  sort      Int     @default(0)
}

model Inventory {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @unique
  inStock   Int      @default(0)
  reserved  Int      @default(0)
  lowStockAt Int?
  updatedAt DateTime @updatedAt
}

model Cart {
  id         String   @id @default(cuid())
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  sessionId  String?  @unique
  items      CartItem[]
  coupon     Coupon?  @relation(fields: [couponId], references: [id])
  couponId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@unique([userId], map: "uniq_cart_per_user")
}

model CartItem {
  id         String   @id @default(cuid())
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  qty        Int      @default(1)
  priceAtAdd Decimal  @db.Decimal(12,2)
  createdAt  DateTime @default(now())
  @@unique([cartId, productId], map: "uniq_product_in_cart")
}

model Order {
  id            String       @id @default(cuid())
  orderNumber   String       @unique
  user          User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String?
  status        OrderStatus  @default(PENDING)
  subtotal      Decimal      @db.Decimal(12,2)
  discount      Decimal      @db.Decimal(12,2) @default(0)
  shippingFee   Decimal      @db.Decimal(12,2) @default(0)
  grandTotal    Decimal      @db.Decimal(12,2)
  shippingAddress Json?
  billingAddress  Json?
  booking       ServiceBooking?
  items         OrderItem[]
  payments      Payment[]
  coupon        Coupon?      @relation(fields: [couponId], references: [id])
  couponId      String?
  couponRedemptions CouponRedemption[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  @@index([userId, status])
}

model OrderItem {
  id         String    @id @default(cuid())
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  product    Product?  @relation(fields: [productId], references: [id])
  productId  String?
  name       String
  sku        String?
  price      Decimal   @db.Decimal(12,2)
  qty        Int
  subtotal   Decimal   @db.Decimal(12,2)
  serviceType ServiceType?
}

model Payment {
  id            String        @id @default(cuid())
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  amount        Decimal       @db.Decimal(12,2)
  currency      String        @default("THB")
  transactionId String?       @unique
  providerData  Json?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  @@index([orderId, status])
}

model Coupon {
  id           String     @id @default(cuid())
  code         String     @unique
  description  String?
  percentOff   Int?
  amountOff    Decimal?   @db.Decimal(12,2)
  active       Boolean    @default(true)
  startsAt     DateTime?
  endsAt       DateTime?
  maxRedemptions Int?
  redemptions  Int        @default(0)
  minSubtotal  Decimal?   @db.Decimal(12,2)
  carts        Cart[]
  orders       Order[]
  couponRedemptions CouponRedemption[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model CouponRedemption {
  id        String  @id @default(cuid())
  coupon    Coupon  @relation(fields: [couponId], references: [id], onDelete: Cascade)
  couponId  String
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  createdAt DateTime @default(now())
  @@unique([couponId, userId, orderId])
  @@index([userId, couponId])
}

model Review {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  product    Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId  String?
  booking    ServiceBooking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  bookingId  String?
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())
  @@index([productId])
  @@index([bookingId])
}

model TechnicianProfile {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String         @unique
  displayName   String
  bio           String?
  skills        ServiceType[]
  serviceRadius Int            @default(30)
  baseLat       Decimal?       @db.Decimal(9,6)
  baseLng       Decimal?       @db.Decimal(9,6)
  ratingAvg     Decimal?       @db.Decimal(3,2)
  ratingCount   Int            @default(0)
  slots         ServiceSlot[]
  bookings      ServiceBooking[] @relation("TechnicianBookings")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ServiceSlot {
  id           String            @id @default(cuid())
  technician   TechnicianProfile @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  technicianId String
  startsAt     DateTime
  endsAt       DateTime
  capacity     Int               @default(1)
  isBlocked    Boolean           @default(false)
  bookings     ServiceBooking[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  @@unique([technicianId, startsAt, endsAt], map: "uniq_tech_slot")
  @@index([startsAt])
}

model ServiceBooking {
  id             String            @id @default(cuid())
  customer       User              @relation("CustomerBookings", fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String
  technician     TechnicianProfile? @relation("TechnicianBookings", fields: [technicianId], references: [id], onDelete: SetNull)
  technicianId   String?
  slot           ServiceSlot?      @relation(fields: [slotId], references: [id], onDelete: SetNull)
  slotId         String?
  status         BookingStatus     @default(REQUESTED)
  serviceType    ServiceType       @default(BRAKE_PAD_CHANGE)
  vehicle        Vehicle?          @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  vehicleId      String?
  vehicleInfo    Json?
  serviceAddress Json?
  lat            Decimal?          @db.Decimal(9,6)
  lng            Decimal?          @db.Decimal(9,6)
  order          Order?            @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId        String? @unique
  notes          String?
  reviews        Review[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  @@index([customerId, status])
  @@index([technicianId, status])
  @@index([slotId])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  entity    String
  entityId  String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  @@index([entity, entityId])
}
